package com.bank.service;

import com.bank.model.Account;
import com.bank.model.Transaction;
import com.bank.model.User;
import com.bank.repository.TransactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Service class for managing Transaction-related operations.
 * This is an initial simple version. Kafka integration will modify this later.
 */
@Service // Marks this class as a Spring Service component.
public class TransactionService {

    private final TransactionRepository transactionRepository;
    private final AccountService accountService; // To interact with account balances

    @Autowired // Spring automatically injects dependencies.
    public TransactionService(TransactionRepository transactionRepository, AccountService accountService) {
        this.transactionRepository = transactionRepository;
        this.accountService = accountService;
    }

    
@Transactional
    public Transaction recordTransaction(Transaction trans) {
	Account byAccountNumber = accountService.findByAccountNumber(trans.getAccount().getAccountNumber());
	
        trans.setAccount(byAccountNumber);
        

        return transactionRepository.save(trans);
    }

    /**
     * Finds all transactions for a given account, ordered by timestamp descending.
     *
     * @param account The account to retrieve transactions for.
     * @return A list of transactions.
     */
    public List<Transaction> findTransactionsByAccount(Account account) {
        return transactionRepository.findByAccountOrderByTimestampDesc(account);
    }

    /**
     * Finds a transaction by its ID.
     *
     * @param id The ID of the transaction.
     * @return An Optional containing the Transaction if found, or empty if not.
     */
    public Optional<Transaction> findTransactionById(Long id) {
        return transactionRepository.findById(id);
    }
}
