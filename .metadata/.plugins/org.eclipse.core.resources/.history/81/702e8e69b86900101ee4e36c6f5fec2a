package com.bank.service;

import com.bank.model.Account;
import com.bank.model.User;
import com.bank.repository.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.UUID; // For generating unique account numbers

/**
 * Service class for managing Account-related operations.
 * Handles business logic for creating accounts, checking balances, and retrieving accounts.
 */
@Service // Marks this class as a Spring Service component.
public class AccountService {

    private final AccountRepository accountRepository;

    @Autowired // Spring automatically injects dependencies.
    public AccountService(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    /**
     * Creates a new bank account for a given user.
     * Generates a unique account number.
     *
     * @param authenticatedUser The User who owns this account.
     * @param accountType The type of account (e.g., "SAVINGS", "CHECKING").
     * @return The created Account object.
     */
    @Transactional // Ensures the entire method runs within a single database transaction.
    public Account createAccount(User authenticatedUser, String accountType) {
        // Generate a unique account number
        String accountNumber = UUID.randomUUID().toString().replace("-", "").substring(0, 10).toUpperCase();

        Account account = Account.builder()
                .user(authenticatedUser)
                .accountNumber(accountNumber)
                .balance(BigDecimal.ZERO) // New accounts start with zero balance
                .type(accountType)
                .build();

        return accountRepository.save(account);
    }

    /**
     * Retrieves an account by its account number.
     * Caches the result in the "accounts" cache.
     *
     * @param accountNumber The account number to search for.
     * @return An Optional containing the Account if found, or empty if not.
     */
    @Cacheable(value = "accounts", key = "#accountNumber") // Cache the result of this method.
    public Optional<Account> findByAccountNumber(String accountNumber) {
        return accountRepository.findByAccountNumber(accountNumber);
    }

    /**
     * Retrieves all accounts for a specific user.
     *
     * @param authenticatedUser The User object.
     * @return A list of accounts belonging to the user.
     */
    public List<Account> findAccountsByUser(User authenticatedUser) {
        return accountRepository.findByUser(authenticatedUser);
    }

    /**
     * Retrieves the balance of a specific account.
     *
     * @param accountNumber The account number.
     * @return An Optional containing the BigDecimal balance if the account is found, or empty if not.
     */
    @Cacheable(value = "accountBalances", key = "#accountNumber") // Cache account balances
    public Optional<BigDecimal> getAccountBalance(String accountNumber) {
        return findByAccountNumber(accountNumber)
                .map(Account::getBalance); // Java 8 Optional.map to extract balance
    }

    /**
     * Updates an account's balance.
     * This method is called by the Kafka consumer after a transaction is processed.
     * Updates the cache entry for the account.
     *
     * @param account The account to update.
     * @return The updated Account object.
     */
    @Transactional
    @CachePut(value = "accounts", key = "#account.accountNumber") // Update the cache entry after modification
    @CacheEvict(value = "accountBalances", key = "#account.accountNumber") // Evict old balance from cache
    public Account updateAccountBalance(Account account) {
        return accountRepository.save(account);
    }

    /**
     * Finds an account by its ID and ensures it belongs to the specified user.
     *
     * @param accountId The ID of the account.
     * @param user The user attempting to access the account.
     * @return An Optional containing the Account if found and owned by the user, or empty.
     */
    public Optional<Account> findByIdAndUser(Long accountId, User user) {
        return accountRepository.findByIdAndUser(accountId, user);
    }
}