package com.bank.controller;


import com.bank.model.Account;
import com.bank.model.User;
import com.bank.service.AccountService;
import com.bank.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

/**
 * REST Controller for Account-related operations.
 * Handles HTTP requests for account creation, balance inquiry, and account retrieval.
 */
@RestController // Marks this class as a REST controller.
@RequestMapping("/api/accounts") // Base path for all endpoints in this controller.
public class AccountController {

    private final AccountService accountService;
    private final UserService userService; // To get the authenticated user

    @Autowired // Spring automatically injects dependencies.
    public AccountController(AccountService accountService, UserService userService) {
        this.accountService = accountService;
        this.userService = userService;
    }

    /**
     * Helper method to get the currently authenticated user.
     * In a real application, this would typically involve a DTO for security.
     *
     * @return The authenticated User object, or null if not found.
     */
   



    /**
     * Creates a new account for the authenticated user.
     *
     * @param accountType The type of account (e.g., "SAVINGS", "CHECKING") from request body.
     * @return ResponseEntity with the created Account and HTTP status 201 (Created).
     */
    @PostMapping // Maps POST requests to /api/accounts.
    public ResponseEntity<Account> createAccount(@RequestBody String accountType,User user) {
    	
    	Account account = accountService.createAccount(user, accountType);
        return new ResponseEntity<>(account, HttpStatus.CREATED);
    }

    /**
     * Retrieves all accounts for the authenticated user.
     *
     * @return ResponseEntity with a list of accounts and HTTP status 200 (OK).
     */
    @GetMapping // Maps GET requests to /api/accounts.
    public ResponseEntity <List<Account>> getUserAccounts(User User) {
    	List<Account> accountsByUser = accountService.findAccountsByUser(User);
        
        return new ResponseEntity<List<Account>>(accountsByUser, HttpStatus.OK);
    }

    /**
     * Retrieves a specific account by its account number.
     *
     * @param accountNumber The account number from the path variable.
     * @return ResponseEntity with the Account and HTTP status 200 (OK), or 404 (Not Found).
     */
    @GetMapping("/{accountNumber}") // Maps GET requests to /api/accounts/{accountNumber}.
    public ResponseEntity<Account> getAccountByNumber(@PathVariable String accountNumber) {
        Account account = accountService.findByAccountNumber(accountNumber);
        return new ResponseEntity<Account>(account, HttpStatus.OK);
                }

    /**
     * Retrieves the balance of a specific account.
     *
     * @param accountNumber The account number from the path variable.
     * @return ResponseEntity with the balance and HTTP status 200 (OK), or 404 (Not Found).
     */
    @GetMapping("/{accountNumber}/balance") // Maps GET requests to /api/accounts/{accountNumber}/balance.
    public ResponseEntity<BigDecimal> getAccountBalance(@PathVariable String accountNumber) {
        BigDecimal balance = accountService.getAccountBalance(accountNumber);
        return  new ResponseEntity<BigDecimal>(balance, HttpStatus.OK);
                }
}
